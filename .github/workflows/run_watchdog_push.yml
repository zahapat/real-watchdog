# Workflow name
name: Caching using pip

# Run this workflow at scheduled times
on: push

# Create Environment Variables
env:
    author_email_address: ${{ secrets.AUTHOR_EMAIL_ADDRESS }}
    author_name_surname: ${{ secrets.AUTHOR_NAME_SURNAME }}
    recepients_email: ${{ secrets.RECEPIENTS_EMAIL }}
    search_cities_list: ${{ secrets.SEARCH_CITIES_LIST }}
    zone_info: ${{ secrets.ZONE_INFO }}
    smtp_server: ${{ secrets.SMTP_SERVER }}
    smtp_port: ${{ secrets.SMTP_PORT }}
    smtp_username: ${{ secrets.SMTP_USERNAME }}
    mail_app_password: ${{ secrets.MAIL_APP_PASSWORD }}
    website_url_root: ${{ secrets.WEBSITE_URL_ROOT }}
    search_requirements: ${{ secrets.SEARCH_REQUIREMENTS }}
    mask: ${{ secrets.MASK }}    

# Allow write permissions to the remote repo
permissions:
  contents: write

# Create Jobs
jobs:
    run_python_via_powershell:
        runs-on: ${{ matrix.os }}
        strategy:
            max-parallel: 1
            matrix:
                os: [windows-latest]
                python-version: ['3.11']
            fail-fast: false

        # Define Job Steps
        steps:
            - name: Checkout Code
              id: checkout-code
              uses: actions/checkout@v4

            - name: Setup Python Version ${{ matrix.python-version }}
              uses: actions/setup-python@v4
              with:
                python-version: ${{ matrix.python-version }}

            # Caching using pip
            - name: Set Pip Cache Directory by OS
              id: set-cachedir-by-os
              run: |
                OS=$(uname);
                if [ "$OS" == "Linux" ] ; then 
                    echo "CACHEDIR=~/.cache/pip" >> $GITHUB_OUTPUT
                    echo "Linux"
                elif [ "$OS" == "Darwin" ] ; then 
                    echo "CACHEDIR=~/Library/Caches/pip" >> $GITHUB_OUTPUT
                    echo "MacOS"
                elif [[ "$OS" == CYGWIN* || "$OS" == MINGW* ]] ; then 
                    echo "CACHEDIR=~\AppData\Local\pip\Cache" >> $GITHUB_OUTPUT
                    echo "Windows"
                fi
                echo "$OS"
              shell: bash # Do not touch

            - name: Cache Python Packages
              id: cache-packages
              uses: actions/cache@v3
              with:
                path: ${{ steps.set-cachedir-by-os.outputs.CACHEDIR }}
                key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt') }}
                restore-keys: |
                  ${{ runner.os }}-pip-${{ matrix.python-version }}-

            - name: Install Packages
              run: pip install -r requirements.txt

            - name: Check Installed Packages
              run: echo "Cache Hit - ${{ steps.cache-packages.outputs.cache-hit }}"; pip list packages

            # - name: Run Python Script via Powershell
            #   shell: pwsh
            #   run: python watchdog.py

            # - name: Push New Changes to Remote
            #   run: |
            #     git config --global user.name ${{ secrets.AUTHOR_NAME_SURNAME }}
            #     git config --global user.email ${{ secrets.AUTHOR_EMAIL_ADDRESS }}
            #     git add database
            #     git commit -m "[refactor]: Update database via automated action"
            #     git push origin main