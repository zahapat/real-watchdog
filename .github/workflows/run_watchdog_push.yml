# Workflow name
name: Run Python Watchdog Script via Windows Powershell on Push

# Run this workflow at scheduled times
on: push

# Create Environment Variables
env:
    author_email_address: ${{ secrets.AUTHOR_EMAIL_ADDRESS }}
    author_name_surname: ${{ secrets.AUTHOR_NAME_SURNAME }}
    recepients_email: ${{ secrets.RECEPIENTS_EMAIL }}
    search_cities_list: ${{ secrets.SEARCH_CITIES_LIST }}
    zone_info: ${{ secrets.ZONE_INFO }}
    smtp_server: ${{ secrets.SMTP_SERVER }}
    smtp_port: ${{ secrets.SMTP_PORT }}
    smtp_username: ${{ secrets.SMTP_USERNAME }}
    mail_app_password: ${{ secrets.MAIL_APP_PASSWORD }}
    website_url_root: ${{ secrets.WEBSITE_URL_ROOT }}
    search_requirements: ${{ secrets.SEARCH_REQUIREMENTS }}
    mask: ${{ secrets.MASK }}    

# Allow write permissions to the remote repo
permissions:
  contents: write

# Create Jobs
jobs:
    run_python_via_powershell:
        runs-on: ${{ matrix.os }}
        strategy:
            max-parallel: 1
            matrix:
                os: [windows-latest]
                python-version: ['3.11']
            fail-fast: false

        # Define Job Steps
        steps:
            - name: Checkout Code
              id: checkout-code
              uses: actions/checkout@v3

            - name: Setup Python Version ${{ matrix.python-version }}
              id: setup-python
              uses: actions/setup-python@v4
              with:
                python-version: ${{ matrix.python-version }}

            # Do not remove this line: shell: bash
            - name: Get Pip Cache Directory
              id: get-cachedir
              run: |
                echo "CACHEDIR=$(pip cache dir)" >> $GITHUB_OUTPUT
                echo "CACHEDIR: $CACHEDIR"
              shell: bash
            # - name: Get OS
            #   id: get-os
            #   run: |
            #     echo "OS_NAME=${{ runner.os }}" >> $GITHUB_OUTPUT
            #     echo $OS_NAME
            #   shell: bash


            - if: startsWith(runner.os, 'macOS')
              id: get-cachedir-${{ runner.os }}
              shell: bash
              run: |
                echo "CACHEDIR=~/Library/Caches/pip" >> $GITHUB_OUTPUT
            - if: startsWith(runner.os, 'Windows')
              id: get-cachedir-${{ runner.os }}
              shell: bash
              run: |
                echo "CACHEDIR=~\AppData\Local\pip\Cache" >> $GITHUB_OUTPUT
            - if: startsWith(runner.os, 'Linux')
              id: get-cachedir-${{ runner.os }}
              shell: bash
              run: |
                echo "CACHEDIR=~/.cache/pip" >> $GITHUB_OUTPUT



            - name: Cache Python Packages
              id: cache-packages
              uses: actions/cache@v3
              with:
                path: ${{ steps.get-cachedir.outputs.CACHEDIR }}
                key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
                restore-keys: |
                  ${{ runner.os }}-pip-

            - name: Install Packages
              id: install-packages
              if: ${{ steps.cache-packages.outputs.cache-hit != 'true' }}
              continue-on-error: true
              run: pip install -r requirements.txt

            - name: List All Installed Packages
              id: list-packages
              run: echo "Cache Hit - ${{ steps.cache-packages.outputs.cache-hit }}"; pip list packages

            # - name: Run Python Script via Powershell
            #   id: run-script
            #   shell: pwsh
            #   run: python watchdog.py

            # - name: Push New Changes to Remote
            #   id: push-changes
            #   shell: pwsh
            #   run: |
            #     git config --global user.name ${{ secrets.AUTHOR_NAME_SURNAME }}
            #     git config --global user.email ${{ secrets.AUTHOR_EMAIL_ADDRESS }}
            #     git add database
            #     git commit -m "[refactor]: Update database via automated action"
            #     git push origin main